name: GitHub Copilot Code Review

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  copilot-review:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup OCaml (for context)
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: 5.0.x

    - name: Install dependencies (for context)
      run: |
        opam install . --deps-only --with-test
        opam exec -- dune build

    - name: Request Copilot Review
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          
          // Get the files changed in this PR
          const { data: files } = await github.rest.pulls.listFiles({
            owner,
            repo,
            pull_number,
          });
          
          // Filter for OCaml files and data structure related files
          const relevantFiles = files.filter(file => 
            file.filename.endsWith('.ml') || 
            file.filename.endsWith('.mli') ||
            file.filename.includes('data_structures') ||
            file.filename.includes('algorithms') ||
            file.filename.includes('test')
          );
          
          if (relevantFiles.length > 0) {
            // Create a comment mentioning the types of files changed
            const fileTypes = relevantFiles.map(f => f.filename).join('\n- ');
            
            const comment = `🤖 **GitHub Copilot Review Request**
            
            This PR contains changes to data structure/algorithm files:
            - ${fileTypes}
            
            @github-copilot please review this pull request, focusing on:
            - 📊 **Data Structure Implementation**: Correctness of the data structure logic
            - ⚡ **Algorithm Efficiency**: Time and space complexity analysis
            - 🧪 **Test Coverage**: Adequacy of unit tests for the new functionality
            - 📝 **Code Quality**: OCaml best practices and code style
            - 🔒 **Edge Cases**: Handling of boundary conditions and error cases
            - 📚 **Documentation**: Quality of comments and function signatures
            
            Please refer to our [Review Guidelines](.github/REVIEW_GUIDELINES.md) for detailed criteria.
            
            Please provide feedback on the implementation and suggest improvements if any.`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: comment
            });
            
            // Request Copilot review
            try {
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number,
                team_reviewers: ['github-copilot']
              });
            } catch (error) {
              console.log('Note: Could not add Copilot as reviewer automatically');
            }
          }

    - name: Analyze Code Quality
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          
          // Get PR diff
          const { data: diff } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number,
            mediaType: {
              format: 'diff'
            }
          });
          
          // Simple analysis for data structure patterns
          const patterns = [
            { name: 'Stack Implementation', regex: /type.*stack|let.*push|let.*pop/i },
            { name: 'Queue Implementation', regex: /type.*queue|let.*enqueue|let.*dequeue/i },
            { name: 'Tree Implementation', regex: /type.*tree|type.*node|let.*insert.*tree/i },
            { name: 'Sorting Algorithm', regex: /let.*sort|let.*merge|let.*quick/i },
            { name: 'Search Algorithm', regex: /let.*search|let.*find|let.*binary_search/i }
          ];
          
          const detectedPatterns = patterns.filter(pattern => 
            pattern.regex.test(diff)
          );
          
          if (detectedPatterns.length > 0) {
            const patternList = detectedPatterns.map(p => `- ${p.name}`).join('\n');
            
            const analysisComment = `📈 **Automated Code Analysis**
            
            Detected the following data structure/algorithm patterns:
            ${patternList}
            
            **Suggested Review Focus:**
            - Verify time complexity matches the expected performance
            - Check for proper error handling
            - Ensure immutability where appropriate (OCaml best practice)
            - Validate test coverage for edge cases
            - Review documentation for clarity`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: analysisComment
            });
          }
